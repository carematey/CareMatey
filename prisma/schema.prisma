generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  space              Space[]
  spaceAuthorization SpaceAuthorization[]
  card               Card[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id         Int       @id(map: "Card_pkey") @default(autoincrement())
  spaceId    Int
  title      String
  text       String
  tags       String[]
  creatorId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @default(now())
  deletedAt  DateTime?
  userId     String
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  space      Space     @relation(fields: [spaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([tags, creatorId], map: "Card_tags_creatorId_idx")
}

model SpaceAuthorization {
  id               Int       @id @default(autoincrement())
  spaceId          Int
  role             String    @default("WRITE")
  authorizedUserId String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @default(now())
  deletedAt        DateTime?
  authorizedUser   User      @relation(fields: [authorizedUserId], references: [id])
  space            Space     @relation(fields: [spaceId], references: [id])
}

model Category {
  id                 Int     @id @unique @default(autoincrement())
  name               String
  description        String?
  displayDescription Boolean @default(true)
  spaceId            Int
  space              Space   @relation(fields: [spaceId], references: [id])
  cards              Card[]
  image              String?
  position           Int     @default(0)
}

model Space {
  id                 Int                  @id @default(autoincrement())
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @default(now())
  archivedAt         DateTime?
  deletedAt          DateTime?
  userId             String
  categories         Category[]
  user               User                 @relation(fields: [userId], references: [id])
  spaceAuthorization SpaceAuthorization[]
  cards              Card[]
}
