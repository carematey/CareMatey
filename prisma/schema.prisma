// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Space         Space[]
  Card          Card[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Space {
  id         Int       @id @default(autoincrement())
  name       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?
  deletedAt  DateTime?
  cards      Card[]
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@map(name: "space")
}

model Card {
  id         Int       @id @default(autoincrement())
  space      Space     @relation(fields: [spaceId], references: [id])
  spaceId    Int
  title      String
  text       String
  tags       String[]
  ownerId    String
  creatorId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  archivedAt DateTime?
  deletedAt  DateTime?
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@index([tags, creatorId])
  @@map(name: "card")
}
